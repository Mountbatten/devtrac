<?php

/**
 * @file
 * Testing the behaviors of an authenticated user editing about devtrac.
 */

class AuthenticatedUserEditAboutDEvtracTestCase extends DrupalWebTestCase {
  protected $profile = 'devtrac';
  protected $devtracAdmin;
  public static function getInfo() {
    return array(
      'name' => 'Devtrac profile edit test1',
      'description' => t('DevTrac Authenticated User Edits the devtrac profile(About page)'),
      'group' => 'Devtrac',
    );
  }
  /**
   * (non-PHPdoc)
   * @see DrupalWebTestCase::setUp().
   *
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   *
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // If a "log out" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
    if ($pass) {
      $this->loggedInUser = $user;
    }
  }
  /**
   * Creating an admin who is to cerate an authenticated user.
   * 
   * To create a fieldtrip later on.
   */
  public function setUp() {
    parent::setUp();
    $this->devtracAdmin = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
      'access user profiles',
      'administer site configuration',
      'administer modules',
      'create taxonomy_vocabulary_6',
      'create taxonomy_vocabulary_8'));
    $this->drupalLogin($this->devtracAdmin);
    $this->assertNoText(t('Overview'), t(
      'User is successifuly logged in'), 'Devtrac');
    $this->drupalPost('user/' . $this->devtracAdmin->uid . '/edit', array(
      "roles[3]" => 3,
      'field_user_firstname[und][0][value]' => 'firstname',
      'field_user_surname[und][0][value]' => 'lname',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'name' => 'tester',
      'field_user_superior[und][0][target_id]' => 'admin (1)'),
      t('Save'));
  }
  /**
   * Confirmig that title field is present on node 47.
   */
  public function testAboutDevtracTitleFieldExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('title', t('Field title does exist'), 'DevTrac');
    $this->assertNoText(t('Title'), t('Title label is showing'), 'DevTrac');
    $this->assertNoText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
  }
  /**
   * Confirmig that edit body summary field is present on node 47.
   */
  public function testAboutDevtracEditSumaryFieldExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('edit-body-und-0-summary', t('Field edit sumary does exist'), 'DevTrac');
    $this->assertNoText(t('Summary'), t('Summary label is showing'), 'DevTrac');
    $this->assertNoText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
    $this->assertNoLink(t('Hide summary'), 0, t('Link to Hide summary found'));
  }
  /**
   * Confirmig that edit body field is present on node 47.
   */
  public function testAboutDevtracEditBodyFieldExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('body[und][0][value]', t('Field body does exist'), 'DevTrac');
    $this->assertNoText(t('Summary'), t('Summary label is showing'), 'DevTrac');
    $this->assertNoText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
    $this->assertNoLink(t('Hide summary'), 0, t('Link to Hide summary found'));
  }
}
 /**
  * However, authenticated users who are not administers.
  * 
  * Can not access About devtrac.
  * 
  * Edit page!
  * 
  * Create an admin  and login so as he can edit the about devtrac edit page.
  */
class AuthenticatedUserEditSuccessTestCase extends DrupalWebTestCase {
  protected $profile = 'devtrac';
  protected $devtracAdmin;
  public static function getInfo() {
    return array(
      'name' => 'Devtrac profile edit test',
      'description' => t('DevTrac Authenticated User Edits the devtrac profile(About page successifuly)'),
      'group' => 'Devtrac',
    );
  }

  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // If a "log out" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
    if ($pass) {
      $this->loggedInUser = $user;
    }
  }
  public function setUp() {
    parent::setUp();
    $this->devtracAdmin = $this->drupalCreateUser(array(
     'administer users',
     'administer permissions',
     'access user profiles',
     'administer site configuration',
     'administer modules'));
    $this->drupalLogin($this->devtracAdmin);
    $this->assertNoText(t('Overview'), t('User is successifuly logged in'), 'Devtrac');
    $this->drupalPost('user/' . $this->devtracAdmin->uid . '/edit', array(
     "roles[3]" => 3,
     'field_user_firstname[und][0][value]' => 'firstname',
     'field_user_surname[und][0][value]' => 'lname',
     'field_user_aboutme[und][0][value]' => 'aboutjan',
     'name' => 'tester',
     'field_user_superior[und][0][target_id]' => 'admin (1)'),
     t('Save'));
  }
  /**
   * The following test scenarios are meant for fields on node/47/edit. 
   */
  public function testAdminEditsAbouttDevtractest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'page found by the server');
    $this->assertResponse(404, 'request responded to');
  }
  /**
   * Ensuring that edit summary field is exists.
   */
  public function testAboutDevtracEditSumarysuccessFieldExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('edit-body-und-0-summary', 'Field edit sumary does exist', 'DevTrac');
    $this->assertNoText('Summary', 'Summary label is showing', 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac text exists', 'DevTrac');
    $this->assertNoLink('Hide summary', 0, 'Link to Hide summary found');
  }
  /**
   * Ensuring that title field is exists.
   */
  public function testAboutDevtracTitleFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('title', 'Field title does exist', 'DevTrac');
    $this->assertNoText('Title', 'Title label is showing', 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac text exists', 'DevTrac');
  }
  /**
   * Ensuring that body field is exists.
   */
  public function testAboutDevtracBodyFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('body[und][0][value]', 'Field body does exist', 'DevTrac');
    $this->assertNoText('Body', 'Body label is showing', 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac text exists', 'DevTrac');
  }
  /**
   * Ensuring that preview changes field is exists.
   */
  public function testAboutDevtracPreviewChangesFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('edit-delete', 'Button delete is showing does exist', 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac text exists', 'DevTrac');
  }
  /**
   * Ensuring that edit preview field is exists.
   */
  public function testAboutDevtracPreviewFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('edit-delete', 'Button delete is showing does exist', 'DevTrac');
    $this->assertNoField('edit-preview', t('Button Preview is showing'), 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac text exists', 'DevTrac');
  }
  /**
   * Ensuring that edit submit field is exists.
   */
  public function testAboutDevtracSubmitFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoField('edit-submit', t('Button submit does exist'), 'DevTrac');
    $this->assertNoText('Edit Page About Devtrac', 'Edit Page About Devtrac textis not exists', 'DevTrac');
  }
  /**
   * Ensuring that menu links field is exist.
   */
  public function testAboutDevtracEditLinkssuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoText('Real time reporting on public services in Uganda', 'Devtrac description found on the index page', 'Devtrac');
    $this->assertLink('Statistics', 0, 'Link to site statistics found');
    $this->assertLink('Site Reports', 0, 'Link to site reports found');
    $this->assertNoLink('Contact Us', 0, 'Link to site reports found');
  }
  /**
   * Now that the fields are well teststed.
   * 
   * The real editing functionality, Ids the next on the agenda.
   */
  public function testAboutDevtracEditTextInTitleExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $title['title'] = 'testing the title';
    $this->assertNoText('Real time reporting on public services in Uganda', 'Devtrac description found on the index page', 'Devtrac');
    // $this->drupalPost(NULL, $title, t('Save'));
    $this->assertNoText('has been updated.', 'Title has been edited', 'DevTrac');
  }
  /**
   * Now heading to the edited titled page.
   * 
   * however the changes are not effective at this point.
   *
   * Only effective within it's scenario above.
   */
  public function testAboutDevtracEditNewTitleExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoText('testing the title', 'Devtrac description found on the index page', 'Devtrac');
    $this->assertNoText('has been updated.', 'Title has been edited', 'DevTrac');
    $this->assertNoRaw('<h1 id="page-title" class="title">' . 'testing the title'  . '</h1>');
  }
  /**
   * What happens when one press the preview button.
   */
  public function testAboutDevtracEditPreviewPressedExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertNoResponse(200, 'request responded to');
    $this->assertResponse(404, 'request responded to');
    $this->assertNoText('Real time reporting on public services in Uganda', 'Devtrac description found on the index page', 'Devtrac');
    // $this->drupalPost('node/47/edit', array('title' => $this->randomName(8)), t('Save'));
    // It was preview button and removed.
    $this->assertNoField('preview', 'Preview was removed intesionally');
    $this->assertNoText('The trimmed version of your post shows what your post looks like when promoted to the main page or when exported for syndication.', 'Notification is not showing showing on preview', 'DevTrac');
  }

}
